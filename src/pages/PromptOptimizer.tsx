import { useState, useEffect } from 'react'
import { Zap, Copy, CheckCircle, Lock, CreditCard, FileText, ChevronDown, Download } from 'lucide-react'
import { toast } from 'sonner'
import { useNavigate } from 'react-router-dom'

type ExportFormat = 'markdown' | 'xml' | 'plaintext' | 'json'

const PromptOptimizer = () => {
  const [inputPrompt, setInputPrompt] = useState('')
  const [optimizedPrompt, setOptimizedPrompt] = useState('')
  const [isOptimizing, setIsOptimizing] = useState(false)
  const [isOwned, setIsOwned] = useState(false)
  const [copied, setCopied] = useState(false)
  const [exportFormat, setExportFormat] = useState<ExportFormat>('markdown')
  const [showFormatDropdown, setShowFormatDropdown] = useState(false)
  const navigate = useNavigate()

  useEffect(() => {
    // Check if user owns the Prompt Optimizer Pro feature
    const ownedFeatures = JSON.parse(localStorage.getItem('wagus-owned-features') || '[]')
    setIsOwned(ownedFeatures.includes('prompt_optimizer'))
  }, [])

  const enhancePrompt = (prompt: string): string => {
    // Advanced prompt optimization logic
    const optimizations = [
      // Add context and role
      `You are an expert AI assistant with deep knowledge in prompt engineering and optimization.\n\n`,
      
      // Add clear instructions
      `Task: ${prompt}\n\n`,
      
      // Add structure
      `Please follow this structured approach:\n`,
      `1. Analyze the request carefully\n`,
      `2. Consider multiple perspectives and approaches\n`,
      `3. Provide a comprehensive and well-reasoned response\n`,
      `4. Include specific examples where relevant\n`,
      `5. Ensure accuracy and clarity in your output\n\n`,
      
      // Add output format
      `Output Format:\n`,
      `- Use clear headings and bullet points\n`,
      `- Provide step-by-step explanations when applicable\n`,
      `- Include relevant examples or code snippets\n`,
      `- Summarize key points at the end\n\n`,
      
      // Add quality requirements
      `Quality Requirements:\n`,
      `- Ensure factual accuracy\n`,
      `- Use professional and clear language\n`,
      `- Provide actionable insights\n`,
      `- Consider edge cases and limitations\n\n`,
      
      // Add reasoning requirement
      `Please think through this step-by-step and show your reasoning process.`
    ]
    
    return optimizations.join('')
  }

  const handleOptimize = async () => {
    if (!inputPrompt.trim()) {
      toast.error('Please enter a prompt to optimize')
      return
    }

    setIsOptimizing(true)
    
    // Simulate AI processing time
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    const enhanced = enhancePrompt(inputPrompt)
    setOptimizedPrompt(enhanced)
    setIsOptimizing(false)
    
    toast.success('Prompt optimized successfully!')
  }

  const formatPrompt = (prompt: string, format: ExportFormat): string => {
    switch (format) {
      case 'markdown':
        return `# Optimized Prompt\n\n${prompt}\n\n---\n*Generated by WAGUS Prompt Optimizer Pro*`
      case 'xml':
        return `<?xml version="1.0" encoding="UTF-8"?>\n<prompt>\n  <content><![CDATA[${prompt}]]></content>\n  <generator>WAGUS Prompt Optimizer Pro</generator>\n  <timestamp>${new Date().toISOString()}</timestamp>\n</prompt>`
      case 'plaintext':
        return `${prompt}\n\n-- Generated by WAGUS Prompt Optimizer Pro --`
      case 'json':
        return JSON.stringify({
          prompt: prompt,
          generator: 'WAGUS Prompt Optimizer Pro',
          timestamp: new Date().toISOString(),
          format: 'optimized'
        }, null, 2)
      default:
        return prompt
    }
  }

  const getFormattedPrompt = () => {
    return formatPrompt(optimizedPrompt, exportFormat)
  }

  const handleCopy = async () => {
    try {
      const formattedContent = getFormattedPrompt()
      await navigator.clipboard.writeText(formattedContent)
      setCopied(true)
      toast.success(`Optimized prompt copied as ${exportFormat.toUpperCase()}!`)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      toast.error('Failed to copy to clipboard')
    }
  }

  const handleDownload = () => {
    const formattedContent = getFormattedPrompt()
    const fileExtensions = {
      markdown: 'md',
      xml: 'xml',
      plaintext: 'txt',
      json: 'json'
    }
    
    const blob = new Blob([formattedContent], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `optimized-prompt.${fileExtensions[exportFormat]}`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    
    toast.success(`Prompt downloaded as ${exportFormat.toUpperCase()}!`)
  }

  const formatOptions = [
    { value: 'markdown' as ExportFormat, label: 'Markdown (default)', icon: '📝' },
    { value: 'xml' as ExportFormat, label: 'XML', icon: '🏷️' },
    { value: 'plaintext' as ExportFormat, label: 'Plain Text', icon: '📄' },
    { value: 'json' as ExportFormat, label: 'JSON', icon: '🔧' }
  ]

  const handlePurchase = () => {
    navigate('/payments')
  }

  if (!isOwned) {
    return (
      <div className="min-h-screen p-6" style={{ backgroundColor: `rgb(var(--background))` }}>
        <div className="max-w-4xl mx-auto">
          <div className="text-center py-16">
            <div className="w-24 h-24 mx-auto mb-6 rounded-full flex items-center justify-center" style={{ backgroundColor: `rgb(var(--primary) / 0.1)` }}>
              <Lock className="w-12 h-12" style={{ color: `rgb(var(--primary))` }} />
            </div>
            <h1 className="text-3xl font-bold mb-4" style={{ color: `rgb(var(--foreground))` }}>
              Prompt Optimizer Pro
            </h1>
            <p className="text-lg mb-8" style={{ color: `rgb(var(--foreground) / 0.7)` }}>
              Transform your prompts into highly effective, structured instructions that get better AI responses.
            </p>
            
            <div className="max-w-2xl mx-auto mb-8 p-6 rounded-lg" style={{ backgroundColor: `rgb(var(--card))`, border: `1px solid rgb(var(--border))` }}>
              <h3 className="text-xl font-semibold mb-4" style={{ color: `rgb(var(--foreground))` }}>Premium Features</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-left">
                <div className="flex items-start space-x-3">
                  <CheckCircle className="w-5 h-5 mt-0.5" style={{ color: `rgb(var(--primary))` }} />
                  <span style={{ color: `rgb(var(--foreground) / 0.8)` }}>Advanced prompt structuring</span>
                </div>
                <div className="flex items-start space-x-3">
                  <CheckCircle className="w-5 h-5 mt-0.5" style={{ color: `rgb(var(--primary))` }} />
                  <span style={{ color: `rgb(var(--foreground) / 0.8)` }}>Context and role optimization</span>
                </div>
                <div className="flex items-start space-x-3">
                  <CheckCircle className="w-5 h-5 mt-0.5" style={{ color: `rgb(var(--primary))` }} />
                  <span style={{ color: `rgb(var(--foreground) / 0.8)` }}>Output format specification</span>
                </div>
                <div className="flex items-start space-x-3">
                  <CheckCircle className="w-5 h-5 mt-0.5" style={{ color: `rgb(var(--primary))` }} />
                  <span style={{ color: `rgb(var(--foreground) / 0.8)` }}>Quality requirement integration</span>
                </div>
                <div className="flex items-start space-x-3">
                  <CheckCircle className="w-5 h-5 mt-0.5" style={{ color: `rgb(var(--primary))` }} />
                  <span style={{ color: `rgb(var(--foreground) / 0.8)` }}>Step-by-step reasoning</span>
                </div>
                <div className="flex items-start space-x-3">
                  <CheckCircle className="w-5 h-5 mt-0.5" style={{ color: `rgb(var(--primary))` }} />
                  <span style={{ color: `rgb(var(--foreground) / 0.8)` }}>Professional prompt templates</span>
                </div>
              </div>
            </div>
            
            <button
              onClick={handlePurchase}
              className="inline-flex items-center px-8 py-3 rounded-lg font-semibold transition-colors"
              style={{ 
                backgroundColor: `rgb(var(--primary))`, 
                color: `rgb(var(--primary-foreground))`
              }}
            >
              <CreditCard className="w-5 h-5 mr-2" />
              Purchase for 10,000 WAGUS
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen p-6" style={{ backgroundColor: `rgb(var(--background))` }}>
      <div className="max-w-6xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2" style={{ color: `rgb(var(--foreground))` }}>
            Prompt Optimizer Pro
          </h1>
          <p className="text-lg" style={{ color: `rgb(var(--foreground) / 0.7)` }}>
            Transform your prompts into highly effective, structured instructions
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Section */}
          <div className="space-y-4">
            <div className="p-6 rounded-lg" style={{ backgroundColor: `rgb(var(--card))`, border: `1px solid rgb(var(--border))` }}>
              <h2 className="text-xl font-semibold mb-4" style={{ color: `rgb(var(--foreground))` }}>
                Original Prompt
              </h2>
              <textarea
                value={inputPrompt}
                onChange={(e) => setInputPrompt(e.target.value)}
                placeholder="Enter your prompt here..."
                className="w-full h-64 p-4 rounded-lg border resize-none focus:outline-none focus:ring-2"
                style={{ 
                  backgroundColor: `rgb(var(--background))`,
                  borderColor: `rgb(var(--border))`,
                  color: `rgb(var(--foreground))`
                }}
              />
              <button
                onClick={handleOptimize}
                disabled={isOptimizing || !inputPrompt.trim()}
                className="mt-4 w-full flex items-center justify-center px-6 py-3 rounded-lg font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                style={{ 
                  backgroundColor: `rgb(var(--primary))`, 
                  color: `rgb(var(--primary-foreground))`
                }}
              >
                {isOptimizing ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                    Optimizing...
                  </>
                ) : (
                  <>
                    <Zap className="w-5 h-5 mr-2" />
                    Optimize Prompt
                  </>
                )}
              </button>
            </div>
          </div>

          {/* Output Section */}
          <div className="space-y-4">
            <div className="p-6 rounded-lg" style={{ backgroundColor: `rgb(var(--card))`, border: `1px solid rgb(var(--border))` }}>
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold" style={{ color: `rgb(var(--foreground))` }}>
                  Optimized Prompt
                </h2>
                {optimizedPrompt && (
                  <div className="flex items-center space-x-2">
                    {/* Format Selector Dropdown */}
                    <div className="relative">
                      <button
                        onClick={() => setShowFormatDropdown(!showFormatDropdown)}
                        className="flex items-center px-3 py-2 rounded-lg border transition-colors"
                        style={{ 
                          backgroundColor: `rgb(var(--background))`,
                          borderColor: `rgb(var(--border))`,
                          color: `rgb(var(--foreground))`
                        }}
                      >
                        <span className="mr-2">{formatOptions.find(f => f.value === exportFormat)?.icon}</span>
                        <span className="text-sm">{formatOptions.find(f => f.value === exportFormat)?.label}</span>
                        <ChevronDown className="w-4 h-4 ml-2" />
                      </button>
                      
                      {showFormatDropdown && (
                        <div 
                          className="absolute right-0 mt-2 w-48 rounded-lg border shadow-lg z-10"
                          style={{ 
                            backgroundColor: `rgb(var(--card))`,
                            borderColor: `rgb(var(--border))`
                          }}
                        >
                          {formatOptions.map((option) => (
                            <button
                              key={option.value}
                              onClick={() => {
                                setExportFormat(option.value)
                                setShowFormatDropdown(false)
                                toast.success(`Format changed to ${option.label}`)
                              }}
                              className="w-full flex items-center px-3 py-2 text-left hover:bg-opacity-80 transition-colors first:rounded-t-lg last:rounded-b-lg"
                              style={{ 
                                backgroundColor: exportFormat === option.value ? `rgb(var(--accent))` : 'transparent',
                                color: exportFormat === option.value ? `rgb(var(--accent-foreground))` : `rgb(var(--foreground))`
                              }}
                            >
                              <span className="mr-2">{option.icon}</span>
                              <span className="text-sm">{option.label}</span>
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                    
                    {/* Download Button */}
                    <button
                      onClick={handleDownload}
                      className="flex items-center px-3 py-2 rounded-lg transition-colors"
                      style={{ 
                        backgroundColor: `rgb(var(--accent))`,
                        color: `rgb(var(--accent-foreground))`
                      }}
                    >
                      <Download className="w-4 h-4 mr-1" />
                      <span className="text-sm">Download</span>
                    </button>
                    
                    {/* Copy Button */}
                    <button
                      onClick={handleCopy}
                      className="flex items-center px-3 py-2 rounded-lg transition-colors"
                      style={{ 
                        backgroundColor: copied ? 'rgb(34 197 94 / 0.1)' : `rgb(var(--accent))`,
                        color: copied ? 'rgb(34 197 94)' : `rgb(var(--accent-foreground))`
                      }}
                    >
                      {copied ? (
                        <>
                          <CheckCircle className="w-4 h-4 mr-1" />
                          <span className="text-sm">Copied!</span>
                        </>
                      ) : (
                        <>
                          <Copy className="w-4 h-4 mr-1" />
                          <span className="text-sm">Copy</span>
                        </>
                      )}
                    </button>
                  </div>
                )}
              </div>
              <div 
                className="w-full h-64 p-4 rounded-lg border overflow-auto"
                style={{ 
                  backgroundColor: `rgb(var(--background))`,
                  borderColor: `rgb(var(--border))`,
                  color: `rgb(var(--foreground))`
                }}
              >
                {optimizedPrompt ? (
                  <pre className="whitespace-pre-wrap text-sm font-mono">{getFormattedPrompt()}</pre>
                ) : (
                  <div className="text-center">
                    <FileText className="w-12 h-12 mx-auto mb-4" style={{ color: `rgb(var(--foreground) / 0.3)` }} />
                    <p className="text-lg font-medium mb-2" style={{ color: `rgb(var(--foreground) / 0.5)` }}>
                      Ready to optimize your prompt
                    </p>
                    <p className="text-sm" style={{ color: `rgb(var(--foreground) / 0.5)` }}>
                      Enter your prompt and select a format to get started
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Tips Section */}
        <div className="mt-8 p-6 rounded-lg" style={{ backgroundColor: `rgb(var(--card))`, border: `1px solid rgb(var(--border))` }}>
          <h3 className="text-lg font-semibold mb-4" style={{ color: `rgb(var(--foreground))` }}>Optimization Tips & Format Guide</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium mb-3" style={{ color: `rgb(var(--foreground))` }}>General Tips</h4>
              <div className="space-y-2 text-sm" style={{ color: `rgb(var(--foreground) / 0.8)` }}>
                <div>
                  <span className="font-medium">Be Specific:</span> Include context, constraints, and desired outcomes
                </div>
                <div>
                  <span className="font-medium">Define Role:</span> Tell the AI what expertise level to assume
                </div>
                <div>
                  <span className="font-medium">Set Expectations:</span> Specify quality requirements and reasoning depth
                </div>
              </div>
            </div>
            <div>
              <h4 className="font-medium mb-3" style={{ color: `rgb(var(--foreground))` }}>Format Benefits</h4>
              <div className="space-y-2 text-sm" style={{ color: `rgb(var(--foreground) / 0.8)` }}>
                <div>
                  <span className="font-medium text-blue-600">Markdown:</span> Great for documentation and structured content
                </div>
                <div>
                  <span className="font-medium text-green-600">XML:</span> Perfect for data exchange and structured markup
                </div>
                <div>
                  <span className="font-medium text-purple-600">Plain Text:</span> Simple, clean format for basic content
                </div>
                <div>
                  <span className="font-medium text-orange-600">JSON:</span> Ideal for APIs and structured data processing
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default PromptOptimizer